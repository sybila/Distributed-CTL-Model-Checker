apply plugin: 'java'

sourceCompatibility = 1.7
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.intellij:annotations:5.1'
    compile project(':CTL Parser')
    compile project(':Model Checker')
    compile project(':ODE Abstraction')
    compile project(':Thomas Network Abstraction')
    compile files('../libs/mpj.jar')
    compile 'com.google.code.gson:gson:2.3.1'
}

//create a single Jar with all dependencies
task odeJar(type: Jar) {
    manifest {
        attributes  'Implementation-Title': 'Biodivine CTL',
                    'Implementation-Version': version,
                    'Main-Class': 'cz.muni.fi.frontend.ODEMain'
    }
    baseName = project.name + '-ode'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//create a single Jar with all dependencies
task thomasJar(type: Jar) {
    manifest {
        attributes  'Implementation-Title': 'Biodivine CTL',
                'Implementation-Version': version,
                'Main-Class': 'cz.muni.fi.frontend.ThomasMain'
    }
    baseName = project.name + '-thomas'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//create a single Jar with all dependencies
task transJar(type: Jar) {
    manifest {
        attributes  'Implementation-Title': 'Biodivine CTL',
                'Implementation-Version': version,
                'Main-Class': 'cz.muni.fi.frontend.TransitionMain'
    }
    baseName = project.name + '-trans'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task patternJar(type: Jar) {
    manifest {
        attributes  'Implementation-Title': 'Biodivine CTL',
                'Implementation-Version': version,
                'Main-Class': 'cz.muni.fi.frontend.PatternMain'
    }
    baseName = project.name + '-pattern'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
